package ru.yandex.practicum.filmorate;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;
import lombok.RequiredArgsConstructor;
import lombok.SneakyThrows;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.ResultMatcher;
import ru.yandex.practicum.filmorate.dao.GenreDao;
import ru.yandex.practicum.filmorate.dao.MpaDao;
import ru.yandex.practicum.filmorate.model.Film;
import ru.yandex.practicum.filmorate.model.Genre;
import ru.yandex.practicum.filmorate.model.User;
import ru.yandex.practicum.filmorate.storage.FilmDBStorage;

import java.time.LocalDate;
import java.util.List;
import java.util.Set;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;

@SpringBootTest()
@AutoConfigureMockMvc
@AutoConfigureTestDatabase
@RequiredArgsConstructor(onConstructor_ = @Autowired)
public class GenreControllerTests {

    @Autowired
    private MockMvc mockMvc;
    @Autowired
    private ObjectMapper objectMapper;
    @Autowired
    private final GenreDao genreDao;

    @Autowired
    private final FilmDBStorage filmDBStorage;

    @Autowired
    private final JdbcTemplate jdbcTemplate;

    @AfterEach
    void clearFilms() {
        jdbcTemplate.execute("DROP TABLE IF EXISTS PUBLIC.LIKES_TO_FILM");
        jdbcTemplate.execute("DROP TABLE IF EXISTS PUBLIC.FILMS_GENRE");
        jdbcTemplate.execute("DROP TABLE IF EXISTS PUBLIC.FILMS");
        jdbcTemplate.execute("CREATE TABLE IF NOT EXISTS PUBLIC.FILMS (\n" +
                "\tFILM_ID INTEGER GENERATED BY DEFAULT AS IDENTITY,\n" +
                "\tFILM_NAME CHARACTER VARYING(50) NOT NULL,\n" +
                "\tFILM_DESCRIPTION CHARACTER VARYING(200) NOT NULL,\n" +
                "\tFILM_DURATION INTEGER NOT NULL,\n" +
                "\tRELEASE_DATE DATE NOT NULL,\n" +
                "\tMPA_ID INTEGER,\n" +
                "\tCONSTRAINT FILMS_MPA_RATING_FK FOREIGN KEY (MPA_ID) REFERENCES PUBLIC.MPA_RATING(MPA_ID) " +
                "ON DELETE CASCADE ON UPDATE CASCADE,\n" +
                "\tCONSTRAINT FILMS_PK PRIMARY KEY (FILM_ID)\n" +
                ")");
        jdbcTemplate.execute("CREATE TABLE IF NOT EXISTS PUBLIC.FILMS_GENRE (\n" +
                "\tGENRE_ID INTEGER NOT NULL,\n" +
                "\tFILM_ID INTEGER NOT NULL,\n" +
                "\tCONSTRAINT FILMS_GENRE_FK_2 FOREIGN KEY (FILM_ID) REFERENCES PUBLIC.FILMS(FILM_ID) " +
                "ON DELETE CASCADE ON UPDATE CASCADE,\n" +
                "\tCONSTRAINT FILMS_GENRE_FK_3 FOREIGN KEY (GENRE_ID) REFERENCES PUBLIC.GENRE(GENRE_ID) " +
                "ON DELETE CASCADE ON UPDATE CASCADE\n" +
                ")");
        jdbcTemplate.execute("CREATE TABLE IF NOT EXISTS PUBLIC.LIKES_TO_FILM (\n" +
                "\tUSER_ID INTEGER,\n" +
                "\tFILM_ID INTEGER,\n" +
                "\tCONSTRAINT LIKES_TO_FILM_FK_FILM FOREIGN KEY (FILM_ID) REFERENCES PUBLIC.FILMS(FILM_ID) " +
                "ON DELETE CASCADE ON UPDATE CASCADE,\n" +
                "\tCONSTRAINT LIKES_TO_FILM_FK_USER FOREIGN KEY (USER_ID) REFERENCES PUBLIC.USERS(USER_ID) " +
                "ON DELETE CASCADE ON UPDATE CASCADE\n" +
                ")");
    }

    @SneakyThrows
    @Test
    void genreGetAndItsOkTest() {
        mockMvc.perform(get("/genres/1"))
                .andExpect(status().is(200))
                .andExpect(content().json(objectMapper.writeValueAsString(genreDao.getGenreByGenreId(1))));
    }

    @SneakyThrows
    @Test
    void genreGetAllTest() {
        mockMvc.perform(get("/genres"))
                .andExpect(status().is(200))
                .andExpect(content().json(objectMapper.writeValueAsString(genreDao.getAllGenreList())));
    }

    @SneakyThrows
    @Test
    void genreGetBadBehaviorTest() {
        mockMvc.perform(get("/genres/9999"))
                .andExpect(status().is(404))
                .andExpect(result -> result.getResponse().getErrorMessage());
    }

    @SneakyThrows
    @Test
    void putFilmWithNewGenreTest() {
        Film film = Film.builder()
                .name("Name")
                .description("FilmDescription")
                .duration(150)
                .releaseDate(LocalDate.of(1950, 10, 7))
                .build();
        mockMvc.perform(post("/films")
                .contentType("application/json")
                .content(objectMapper.writeValueAsString(film)));
        Film filmUpdate = Film.builder()
                .id(1L)
                .name("Name")
                .description("FilmDescription")
                .duration(190)
                .releaseDate(LocalDate.of(1950, 10, 7))
                .build();
        filmUpdate.getGenres().add(genreDao.getGenreByGenreId(1));
        mockMvc.perform(put("/films")
                        .contentType("application/json")
                        .content(objectMapper.writeValueAsString(filmUpdate)))
                .andExpect(status().is(200))
                .andExpect(jsonPath("$.duration").value(190))
                .andExpect(jsonPath("$.id").value(1));
    }

    @SneakyThrows
    @Test
    void getFilmWithGenreTest() {
        Film film = Film.builder()
                .name("Name")
                .description("FilmDescription")
                .duration(150)
                .releaseDate(LocalDate.of(1950, 10, 7))
                .build();
        mockMvc.perform(post("/films")
                .contentType("application/json")
                .content(objectMapper.writeValueAsString(film)));
        Film filmUpdate = Film.builder()
                .id(1L)
                .name("Name")
                .description("FilmDescription")
                .duration(190)
                .releaseDate(LocalDate.of(1950, 10, 7))
                .build();
        filmUpdate.getGenres().add(genreDao.getGenreByGenreId(1));
        mockMvc.perform(put("/films")
                        .contentType("application/json")
                        .content(objectMapper.writeValueAsString(filmUpdate)))
                .andExpect(status().is(200));
    }

    @SneakyThrows
    @Test
    void putFilmWithGenreListTest() {
        Film film = Film.builder()
                .name("Name")
                .description("FilmDescription")
                .duration(150)
                .releaseDate(LocalDate.of(1950, 10, 7))
                .build();
        mockMvc.perform(post("/films")
                .contentType("application/json")
                .content(objectMapper.writeValueAsString(film)));
        Film filmUpdate = Film.builder()
                .id(1L)
                .name("Name")
                .description("FilmDescription")
                .duration(190)
                .releaseDate(LocalDate.of(1950, 10, 7))
                .build();
        filmUpdate.getGenres().add(genreDao.getGenreByGenreId(1));
        filmUpdate.getGenres().add(genreDao.getGenreByGenreId(2));
        filmUpdate.getGenres().add(genreDao.getGenreByGenreId(3));
        mockMvc.perform(put("/films")
                        .contentType("application/json")
                        .content(objectMapper.writeValueAsString(filmUpdate)))
                .andExpect(status().is(200));
    }

  /*"id": 1,
          "name": "Film Updated",
          "releaseDate": "1989-04-17",
          "description": "New film update decription",
          "duration": 190,
          "rate": 4,
          "mpa": { "id": 5},
            "genres": [{ "id": 2}]*/


}
